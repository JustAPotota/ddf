// Copyright 2020 The Defold Foundation
// Licensed under the Defold License version 1.0 (the "License"); you may not use
// this file except in compliance with the License.
//
// You may obtain a copy of the License, together with FAQs at
// https://www.defold.com/license
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

package dmModelDDF;

import "ddf/proto/ddf/ddf_extensions.proto";
import "ddf/proto/ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesys.proto";
option java_outer_classname = "ModelProto";

// TODO: Add documentation for messages, see spine_ddf.proto

message ModelDesc
{
    required string mesh        = 2 [(resource)=true];
    required string material    = 3 [(resource)=true];
    repeated string textures    = 4 [(resource)=true];
    optional string skeleton    = 5 [(resource)=true];
    optional string animations  = 6 [(resource)=true];
    optional string default_animation  = 7;

    optional string name        = 10; // Deprecated
}

message Model
{
    required string rig_scene   = 1 [(resource)=true];
    required string material    = 2 [(resource)=true];
    repeated string textures    = 3 [(resource)=true];
    optional string default_animation  = 4;
}

message ResetConstant
{
    required uint64         name_hash   = 1;
}

message SetTexture
{
    required uint64 texture_hash = 1;
    required uint32 texture_unit = 2;
}

message ModelPlayAnimation
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
    optional float blend_duration = 3 [default = 0.0];
    optional float offset = 4 [default = 0.0];
    optional float playback_rate = 5 [default = 1.0];
}

message ModelCancelAnimation
{
}

/*# Model API documentation
 *
 * @document
 * @name Model
 * @namespace model
 */

/*# reports the completion of a Model animation
 *
 * This message is sent when a Model animation has finished playing back to the script
 * that started the animation.
 *
 * [icon:attention] No message is sent if a completion callback function was supplied
 * when the animation was started. No message is sent if the animation is cancelled with
 * model.cancel(). This message is sent only for animations that play with
 * the following playback modes:
 *
 * - `go.PLAYBACK_ONCE_FORWARD`
 * - `go.PLAYBACK_ONCE_BACKWARD`
 * - `go.PLAYBACK_ONCE_PINGPONG`
 *
 * @message
 * @name model_animation_done
 * @param animation_id [type:hash] the id of the completed animation
 * @param playback [type:constant] the playback mode of the completed animation
 * @examples
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("model_animation_done") then
 *     if message.animation_id == hash("run") and message.playback == go.PLAYBACK_ONCE_FORWARD then
 *       -- The animation "run" has finished running forward.
 *     end
 *   end
 * end
 * ```
 */

message ModelAnimationDone
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
}
